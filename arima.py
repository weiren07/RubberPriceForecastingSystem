# -*- coding: utf-8 -*-
"""Arima.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PfIC7e2HgkbpDgWicXRurV0he31wI_w2
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

import statsmodels.api as sm
from sklearn.metrics import mean_absolute_error, mean_squared_error
# Load the dataset
data = pd.read_csv('modi_data.csv')

# Extract the 'SMR20' column
original_data = data['SMR20']

# Apply differencing to make the data stationary
differenced_data = original_data.diff().dropna()

# Calculate the differences
differences = original_data.diff()

# Plot the original series and the differences
plt.figure(figsize=(12, 6))
plt.subplot(2, 1, 1)
plt.plot(original_data)
plt.title('Original Series')
plt.subplot(2, 1, 2)
plt.plot(differences)
plt.title('Differences')
plt.tight_layout()
plt.show()

differenced_data.describe()

# Fit the ARIMA model
model = sm.tsa.ARIMA(differenced_data, order=(2, 1, 2))
model_fit = model.fit()

# Get the model summary
print(model_fit.summary())

# Get the model residuals
residuals = model_fit.resid

# Perform Ljung-Box test on residuals
lb_test = sm.stats.acorr_ljungbox(residuals, lags=18, return_df=True)
lb_statistic = lb_test['lb_stat']
lb_pvalue = lb_test['lb_pvalue']

# Print the Ljung-Box test results
print("\nLjung-Box Test (18 lags):")
print(lb_test)

# Calculate other evaluation metrics
rmse = np.sqrt(mean_squared_error(differenced_data, model_fit.fittedvalues))
mae = mean_absolute_error(differenced_data, model_fit.fittedvalues)
mse = mean_squared_error(differenced_data, model_fit.fittedvalues)
mape = np.mean(np.abs(residuals / data['SMR20'].iloc[1:]) * 100)

# Print other evaluation metrics
print("\nEvaluation Metrics:")
print("RMSE:", rmse)
print("MAPE:", mape)
print("MAE:", mae)
print("MSE:", mse)